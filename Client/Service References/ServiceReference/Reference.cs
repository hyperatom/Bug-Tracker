//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Bug", Namespace="http://schemas.datacontract.org/2004/07/DataEntities.Entity")]
    [System.SerializableAttribute()]
    public partial class Bug : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.ServiceReference.User AssignedUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.ServiceReference.User CreatedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateFoundField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FixedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastModifiedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.ServiceReference.Project ProjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.ServiceReference.User AssignedUser {
            get {
                return this.AssignedUserField;
            }
            set {
                if ((object.ReferenceEquals(this.AssignedUserField, value) != true)) {
                    this.AssignedUserField = value;
                    this.RaisePropertyChanged("AssignedUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.ServiceReference.User CreatedBy {
            get {
                return this.CreatedByField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedByField, value) != true)) {
                    this.CreatedByField = value;
                    this.RaisePropertyChanged("CreatedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateFound {
            get {
                return this.DateFoundField;
            }
            set {
                if ((this.DateFoundField.Equals(value) != true)) {
                    this.DateFoundField = value;
                    this.RaisePropertyChanged("DateFound");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Fixed {
            get {
                return this.FixedField;
            }
            set {
                if ((this.FixedField.Equals(value) != true)) {
                    this.FixedField = value;
                    this.RaisePropertyChanged("Fixed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastModified {
            get {
                return this.LastModifiedField;
            }
            set {
                if ((this.LastModifiedField.Equals(value) != true)) {
                    this.LastModifiedField = value;
                    this.RaisePropertyChanged("LastModified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityField, value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.ServiceReference.Project Project {
            get {
                return this.ProjectField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectField, value) != true)) {
                    this.ProjectField = value;
                    this.RaisePropertyChanged("Project");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/DataEntities.Entity")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surname {
            get {
                return this.SurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                    this.SurnameField = value;
                    this.RaisePropertyChanged("Surname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Project", Namespace="http://schemas.datacontract.org/2004/07/DataEntities.Entity")]
    [System.SerializableAttribute()]
    public partial class Project : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Role", Namespace="http://schemas.datacontract.org/2004/07/DataEntities.Entity")]
    [System.SerializableAttribute()]
    public partial class Role : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleName {
            get {
                return this.RoleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleNameField, value) != true)) {
                    this.RoleNameField = value;
                    this.RaisePropertyChanged("RoleName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BugActionLog", Namespace="http://schemas.datacontract.org/2004/07/DataEntities.Entity")]
    [System.SerializableAttribute()]
    public partial class BugActionLog : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.ServiceReference.Action ActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BugNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.ServiceReference.Action Action {
            get {
                return this.ActionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionField, value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BugName {
            get {
                return this.BugNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BugNameField, value) != true)) {
                    this.BugNameField = value;
                    this.RaisePropertyChanged("BugName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Action", Namespace="http://schemas.datacontract.org/2004/07/DataEntities.Entity")]
    [System.SerializableAttribute()]
    public partial class Action : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActionName {
            get {
                return this.ActionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionNameField, value) != true)) {
                    this.ActionNameField = value;
                    this.RaisePropertyChanged("ActionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ITrackerService")]
    public interface ITrackerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/GetAllBugs", ReplyAction="http://tempuri.org/ITrackerService/GetAllBugsResponse")]
        System.Collections.Generic.List<Client.ServiceReference.Bug> GetAllBugs();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/GetAllBugs", ReplyAction="http://tempuri.org/ITrackerService/GetAllBugsResponse")]
        System.IAsyncResult BeginGetAllBugs(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Client.ServiceReference.Bug> EndGetAllBugs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/DeleteBugs", ReplyAction="http://tempuri.org/ITrackerService/DeleteBugsResponse")]
        bool DeleteBugs(System.Collections.Generic.List<Client.ServiceReference.Bug> bugList);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/DeleteBugs", ReplyAction="http://tempuri.org/ITrackerService/DeleteBugsResponse")]
        System.IAsyncResult BeginDeleteBugs(System.Collections.Generic.List<Client.ServiceReference.Bug> bugList, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteBugs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/DeleteBug", ReplyAction="http://tempuri.org/ITrackerService/DeleteBugResponse")]
        void DeleteBug(Client.ServiceReference.Bug bug);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/DeleteBug", ReplyAction="http://tempuri.org/ITrackerService/DeleteBugResponse")]
        System.IAsyncResult BeginDeleteBug(Client.ServiceReference.Bug bug, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteBug(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/GetProjectsAssignedTo", ReplyAction="http://tempuri.org/ITrackerService/GetProjectsAssignedToResponse")]
        System.Collections.Generic.List<Client.ServiceReference.Project> GetProjectsAssignedTo(Client.ServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/GetProjectsAssignedTo", ReplyAction="http://tempuri.org/ITrackerService/GetProjectsAssignedToResponse")]
        System.IAsyncResult BeginGetProjectsAssignedTo(Client.ServiceReference.User user, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Client.ServiceReference.Project> EndGetProjectsAssignedTo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/GetAllProjectsByUser", ReplyAction="http://tempuri.org/ITrackerService/GetAllProjectsByUserResponse")]
        System.Collections.Generic.List<Client.ServiceReference.Project> GetAllProjectsByUser(Client.ServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/GetAllProjectsByUser", ReplyAction="http://tempuri.org/ITrackerService/GetAllProjectsByUserResponse")]
        System.IAsyncResult BeginGetAllProjectsByUser(Client.ServiceReference.User user, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Client.ServiceReference.Project> EndGetAllProjectsByUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/GetBugsByProject", ReplyAction="http://tempuri.org/ITrackerService/GetBugsByProjectResponse")]
        System.Collections.Generic.List<Client.ServiceReference.Bug> GetBugsByProject(Client.ServiceReference.Project project);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/GetBugsByProject", ReplyAction="http://tempuri.org/ITrackerService/GetBugsByProjectResponse")]
        System.IAsyncResult BeginGetBugsByProject(Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Client.ServiceReference.Bug> EndGetBugsByProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/SearchAllProjectBugsAttributes", ReplyAction="http://tempuri.org/ITrackerService/SearchAllProjectBugsAttributesResponse")]
        System.Collections.Generic.List<Client.ServiceReference.Bug> SearchAllProjectBugsAttributes(Client.ServiceReference.Project project, string searchText);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/SearchAllProjectBugsAttributes", ReplyAction="http://tempuri.org/ITrackerService/SearchAllProjectBugsAttributesResponse")]
        System.IAsyncResult BeginSearchAllProjectBugsAttributes(Client.ServiceReference.Project project, string searchText, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Client.ServiceReference.Bug> EndSearchAllProjectBugsAttributes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/CountBugsInProject", ReplyAction="http://tempuri.org/ITrackerService/CountBugsInProjectResponse")]
        int CountBugsInProject(Client.ServiceReference.Project project);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/CountBugsInProject", ReplyAction="http://tempuri.org/ITrackerService/CountBugsInProjectResponse")]
        System.IAsyncResult BeginCountBugsInProject(Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState);
        
        int EndCountBugsInProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/SaveBug", ReplyAction="http://tempuri.org/ITrackerService/SaveBugResponse")]
        Client.ServiceReference.Bug SaveBug(Client.ServiceReference.Bug bug);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/SaveBug", ReplyAction="http://tempuri.org/ITrackerService/SaveBugResponse")]
        System.IAsyncResult BeginSaveBug(Client.ServiceReference.Bug bug, System.AsyncCallback callback, object asyncState);
        
        Client.ServiceReference.Bug EndSaveBug(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/AddBug", ReplyAction="http://tempuri.org/ITrackerService/AddBugResponse")]
        Client.ServiceReference.Bug AddBug(Client.ServiceReference.Bug bug);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/AddBug", ReplyAction="http://tempuri.org/ITrackerService/AddBugResponse")]
        System.IAsyncResult BeginAddBug(Client.ServiceReference.Bug bug, System.AsyncCallback callback, object asyncState);
        
        Client.ServiceReference.Bug EndAddBug(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/GetMyUser", ReplyAction="http://tempuri.org/ITrackerService/GetMyUserResponse")]
        Client.ServiceReference.User GetMyUser();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/GetMyUser", ReplyAction="http://tempuri.org/ITrackerService/GetMyUserResponse")]
        System.IAsyncResult BeginGetMyUser(System.AsyncCallback callback, object asyncState);
        
        Client.ServiceReference.User EndGetMyUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/GetBugPriorityList", ReplyAction="http://tempuri.org/ITrackerService/GetBugPriorityListResponse")]
        System.Collections.Generic.List<string> GetBugPriorityList();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/GetBugPriorityList", ReplyAction="http://tempuri.org/ITrackerService/GetBugPriorityListResponse")]
        System.IAsyncResult BeginGetBugPriorityList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<string> EndGetBugPriorityList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/GetUsersByProject", ReplyAction="http://tempuri.org/ITrackerService/GetUsersByProjectResponse")]
        System.Collections.Generic.List<Client.ServiceReference.User> GetUsersByProject(Client.ServiceReference.Project proj);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/GetUsersByProject", ReplyAction="http://tempuri.org/ITrackerService/GetUsersByProjectResponse")]
        System.IAsyncResult BeginGetUsersByProject(Client.ServiceReference.Project proj, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Client.ServiceReference.User> EndGetUsersByProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/GetAssignedUsersByProject", ReplyAction="http://tempuri.org/ITrackerService/GetAssignedUsersByProjectResponse")]
        System.Collections.Generic.List<Client.ServiceReference.User> GetAssignedUsersByProject(Client.ServiceReference.Project proj);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/GetAssignedUsersByProject", ReplyAction="http://tempuri.org/ITrackerService/GetAssignedUsersByProjectResponse")]
        System.IAsyncResult BeginGetAssignedUsersByProject(Client.ServiceReference.Project proj, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Client.ServiceReference.User> EndGetAssignedUsersByProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/GetManagerUsersByProject", ReplyAction="http://tempuri.org/ITrackerService/GetManagerUsersByProjectResponse")]
        System.Collections.Generic.List<Client.ServiceReference.User> GetManagerUsersByProject(Client.ServiceReference.Project proj);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/GetManagerUsersByProject", ReplyAction="http://tempuri.org/ITrackerService/GetManagerUsersByProjectResponse")]
        System.IAsyncResult BeginGetManagerUsersByProject(Client.ServiceReference.Project proj, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Client.ServiceReference.User> EndGetManagerUsersByProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/GetBugStatusList", ReplyAction="http://tempuri.org/ITrackerService/GetBugStatusListResponse")]
        System.Collections.Generic.List<string> GetBugStatusList();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/GetBugStatusList", ReplyAction="http://tempuri.org/ITrackerService/GetBugStatusListResponse")]
        System.IAsyncResult BeginGetBugStatusList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<string> EndGetBugStatusList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/GetProjectsManagedBy", ReplyAction="http://tempuri.org/ITrackerService/GetProjectsManagedByResponse")]
        System.Collections.Generic.List<Client.ServiceReference.Project> GetProjectsManagedBy(Client.ServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/GetProjectsManagedBy", ReplyAction="http://tempuri.org/ITrackerService/GetProjectsManagedByResponse")]
        System.IAsyncResult BeginGetProjectsManagedBy(Client.ServiceReference.User user, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Client.ServiceReference.Project> EndGetProjectsManagedBy(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/AddProject", ReplyAction="http://tempuri.org/ITrackerService/AddProjectResponse")]
        Client.ServiceReference.Project AddProject(Client.ServiceReference.Project project);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/AddProject", ReplyAction="http://tempuri.org/ITrackerService/AddProjectResponse")]
        System.IAsyncResult BeginAddProject(Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState);
        
        Client.ServiceReference.Project EndAddProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/SaveProject", ReplyAction="http://tempuri.org/ITrackerService/SaveProjectResponse")]
        Client.ServiceReference.Project SaveProject(Client.ServiceReference.Project project);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/SaveProject", ReplyAction="http://tempuri.org/ITrackerService/SaveProjectResponse")]
        System.IAsyncResult BeginSaveProject(Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState);
        
        Client.ServiceReference.Project EndSaveProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/DeleteProject", ReplyAction="http://tempuri.org/ITrackerService/DeleteProjectResponse")]
        void DeleteProject(Client.ServiceReference.Project project);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/DeleteProject", ReplyAction="http://tempuri.org/ITrackerService/DeleteProjectResponse")]
        System.IAsyncResult BeginDeleteProject(Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/LeaveProject", ReplyAction="http://tempuri.org/ITrackerService/LeaveProjectResponse")]
        void LeaveProject(Client.ServiceReference.Project project, Client.ServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/LeaveProject", ReplyAction="http://tempuri.org/ITrackerService/LeaveProjectResponse")]
        System.IAsyncResult BeginLeaveProject(Client.ServiceReference.Project project, Client.ServiceReference.User user, System.AsyncCallback callback, object asyncState);
        
        void EndLeaveProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/RequestProjectAssignment", ReplyAction="http://tempuri.org/ITrackerService/RequestProjectAssignmentResponse")]
        void RequestProjectAssignment(string code, Client.ServiceReference.User user, Client.ServiceReference.Role role);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/RequestProjectAssignment", ReplyAction="http://tempuri.org/ITrackerService/RequestProjectAssignmentResponse")]
        System.IAsyncResult BeginRequestProjectAssignment(string code, Client.ServiceReference.User user, Client.ServiceReference.Role role, System.AsyncCallback callback, object asyncState);
        
        void EndRequestProjectAssignment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/GetAllRoles", ReplyAction="http://tempuri.org/ITrackerService/GetAllRolesResponse")]
        System.Collections.Generic.List<Client.ServiceReference.Role> GetAllRoles();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/GetAllRoles", ReplyAction="http://tempuri.org/ITrackerService/GetAllRolesResponse")]
        System.IAsyncResult BeginGetAllRoles(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Client.ServiceReference.Role> EndGetAllRoles(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/GetProjectByCode", ReplyAction="http://tempuri.org/ITrackerService/GetProjectByCodeResponse")]
        Client.ServiceReference.Project GetProjectByCode(string projectCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/GetProjectByCode", ReplyAction="http://tempuri.org/ITrackerService/GetProjectByCodeResponse")]
        System.IAsyncResult BeginGetProjectByCode(string projectCode, System.AsyncCallback callback, object asyncState);
        
        Client.ServiceReference.Project EndGetProjectByCode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/GetUsersPendingProjectJoin", ReplyAction="http://tempuri.org/ITrackerService/GetUsersPendingProjectJoinResponse")]
        System.Collections.Generic.List<Client.ServiceReference.User> GetUsersPendingProjectJoin(Client.ServiceReference.Project project);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/GetUsersPendingProjectJoin", ReplyAction="http://tempuri.org/ITrackerService/GetUsersPendingProjectJoinResponse")]
        System.IAsyncResult BeginGetUsersPendingProjectJoin(Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Client.ServiceReference.User> EndGetUsersPendingProjectJoin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/AcceptUserOnProject", ReplyAction="http://tempuri.org/ITrackerService/AcceptUserOnProjectResponse")]
        void AcceptUserOnProject(Client.ServiceReference.User user, Client.ServiceReference.Project project);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/AcceptUserOnProject", ReplyAction="http://tempuri.org/ITrackerService/AcceptUserOnProjectResponse")]
        System.IAsyncResult BeginAcceptUserOnProject(Client.ServiceReference.User user, Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState);
        
        void EndAcceptUserOnProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/RejectUserFromProject", ReplyAction="http://tempuri.org/ITrackerService/RejectUserFromProjectResponse")]
        void RejectUserFromProject(Client.ServiceReference.User user, Client.ServiceReference.Project project);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/RejectUserFromProject", ReplyAction="http://tempuri.org/ITrackerService/RejectUserFromProjectResponse")]
        System.IAsyncResult BeginRejectUserFromProject(Client.ServiceReference.User user, Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState);
        
        void EndRejectUserFromProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/IsValidProjectCode", ReplyAction="http://tempuri.org/ITrackerService/IsValidProjectCodeResponse")]
        bool IsValidProjectCode(string code);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/IsValidProjectCode", ReplyAction="http://tempuri.org/ITrackerService/IsValidProjectCodeResponse")]
        System.IAsyncResult BeginIsValidProjectCode(string code, System.AsyncCallback callback, object asyncState);
        
        bool EndIsValidProjectCode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/GetNumberOfBugsAssignedToUserInProject", ReplyAction="http://tempuri.org/ITrackerService/GetNumberOfBugsAssignedToUserInProjectResponse" +
            "")]
        int GetNumberOfBugsAssignedToUserInProject(Client.ServiceReference.Project project, Client.ServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/GetNumberOfBugsAssignedToUserInProject", ReplyAction="http://tempuri.org/ITrackerService/GetNumberOfBugsAssignedToUserInProjectResponse" +
            "")]
        System.IAsyncResult BeginGetNumberOfBugsAssignedToUserInProject(Client.ServiceReference.Project project, Client.ServiceReference.User user, System.AsyncCallback callback, object asyncState);
        
        int EndGetNumberOfBugsAssignedToUserInProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/GetBugsAssignedToProjectAndUser", ReplyAction="http://tempuri.org/ITrackerService/GetBugsAssignedToProjectAndUserResponse")]
        System.Collections.Generic.List<Client.ServiceReference.Bug> GetBugsAssignedToProjectAndUser(Client.ServiceReference.Project project, Client.ServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/GetBugsAssignedToProjectAndUser", ReplyAction="http://tempuri.org/ITrackerService/GetBugsAssignedToProjectAndUserResponse")]
        System.IAsyncResult BeginGetBugsAssignedToProjectAndUser(Client.ServiceReference.Project project, Client.ServiceReference.User user, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Client.ServiceReference.Bug> EndGetBugsAssignedToProjectAndUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/SaveUserCredentials", ReplyAction="http://tempuri.org/ITrackerService/SaveUserCredentialsResponse")]
        void SaveUserCredentials(Client.ServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/SaveUserCredentials", ReplyAction="http://tempuri.org/ITrackerService/SaveUserCredentialsResponse")]
        System.IAsyncResult BeginSaveUserCredentials(Client.ServiceReference.User user, System.AsyncCallback callback, object asyncState);
        
        void EndSaveUserCredentials(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/UserExists", ReplyAction="http://tempuri.org/ITrackerService/UserExistsResponse")]
        bool UserExists(string username);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/UserExists", ReplyAction="http://tempuri.org/ITrackerService/UserExistsResponse")]
        System.IAsyncResult BeginUserExists(string username, System.AsyncCallback callback, object asyncState);
        
        bool EndUserExists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/GetOpenBugsInProject", ReplyAction="http://tempuri.org/ITrackerService/GetOpenBugsInProjectResponse")]
        System.Collections.Generic.List<Client.ServiceReference.Bug> GetOpenBugsInProject(Client.ServiceReference.Project project);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/GetOpenBugsInProject", ReplyAction="http://tempuri.org/ITrackerService/GetOpenBugsInProjectResponse")]
        System.IAsyncResult BeginGetOpenBugsInProject(Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Client.ServiceReference.Bug> EndGetOpenBugsInProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/GetBugsInProgressFromProject", ReplyAction="http://tempuri.org/ITrackerService/GetBugsInProgressFromProjectResponse")]
        System.Collections.Generic.List<Client.ServiceReference.Bug> GetBugsInProgressFromProject(Client.ServiceReference.Project project);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/GetBugsInProgressFromProject", ReplyAction="http://tempuri.org/ITrackerService/GetBugsInProgressFromProjectResponse")]
        System.IAsyncResult BeginGetBugsInProgressFromProject(Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Client.ServiceReference.Bug> EndGetBugsInProgressFromProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/GetClosedBugsInProject", ReplyAction="http://tempuri.org/ITrackerService/GetClosedBugsInProjectResponse")]
        System.Collections.Generic.List<Client.ServiceReference.Bug> GetClosedBugsInProject(Client.ServiceReference.Project project);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/GetClosedBugsInProject", ReplyAction="http://tempuri.org/ITrackerService/GetClosedBugsInProjectResponse")]
        System.IAsyncResult BeginGetClosedBugsInProject(Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Client.ServiceReference.Bug> EndGetClosedBugsInProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrackerService/GetAllBugActionLogsInProject", ReplyAction="http://tempuri.org/ITrackerService/GetAllBugActionLogsInProjectResponse")]
        System.Collections.Generic.List<Client.ServiceReference.BugActionLog> GetAllBugActionLogsInProject(Client.ServiceReference.Project project);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackerService/GetAllBugActionLogsInProject", ReplyAction="http://tempuri.org/ITrackerService/GetAllBugActionLogsInProjectResponse")]
        System.IAsyncResult BeginGetAllBugActionLogsInProject(Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Client.ServiceReference.BugActionLog> EndGetAllBugActionLogsInProject(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITrackerServiceChannel : Client.ServiceReference.ITrackerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllBugsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllBugsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.Bug> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Client.ServiceReference.Bug>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteBugsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteBugsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProjectsAssignedToCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProjectsAssignedToCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.Project> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Client.ServiceReference.Project>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllProjectsByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllProjectsByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.Project> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Client.ServiceReference.Project>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBugsByProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBugsByProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.Bug> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Client.ServiceReference.Bug>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SearchAllProjectBugsAttributesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SearchAllProjectBugsAttributesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.Bug> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Client.ServiceReference.Bug>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CountBugsInProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CountBugsInProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveBugCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveBugCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Client.ServiceReference.Bug Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Client.ServiceReference.Bug)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddBugCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddBugCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Client.ServiceReference.Bug Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Client.ServiceReference.Bug)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMyUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMyUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Client.ServiceReference.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Client.ServiceReference.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBugPriorityListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBugPriorityListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUsersByProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUsersByProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.User> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Client.ServiceReference.User>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAssignedUsersByProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAssignedUsersByProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.User> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Client.ServiceReference.User>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetManagerUsersByProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetManagerUsersByProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.User> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Client.ServiceReference.User>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBugStatusListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBugStatusListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProjectsManagedByCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProjectsManagedByCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.Project> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Client.ServiceReference.Project>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Client.ServiceReference.Project Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Client.ServiceReference.Project)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Client.ServiceReference.Project Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Client.ServiceReference.Project)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.Role> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Client.ServiceReference.Role>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProjectByCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProjectByCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Client.ServiceReference.Project Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Client.ServiceReference.Project)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUsersPendingProjectJoinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUsersPendingProjectJoinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.User> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Client.ServiceReference.User>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsValidProjectCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsValidProjectCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNumberOfBugsAssignedToUserInProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNumberOfBugsAssignedToUserInProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBugsAssignedToProjectAndUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBugsAssignedToProjectAndUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.Bug> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Client.ServiceReference.Bug>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UserExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOpenBugsInProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOpenBugsInProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.Bug> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Client.ServiceReference.Bug>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBugsInProgressFromProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBugsInProgressFromProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.Bug> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Client.ServiceReference.Bug>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetClosedBugsInProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetClosedBugsInProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.Bug> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Client.ServiceReference.Bug>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllBugActionLogsInProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllBugActionLogsInProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.BugActionLog> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Client.ServiceReference.BugActionLog>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TrackerServiceClient : System.ServiceModel.ClientBase<Client.ServiceReference.ITrackerService>, Client.ServiceReference.ITrackerService {
        
        private BeginOperationDelegate onBeginGetAllBugsDelegate;
        
        private EndOperationDelegate onEndGetAllBugsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllBugsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteBugsDelegate;
        
        private EndOperationDelegate onEndDeleteBugsDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteBugsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteBugDelegate;
        
        private EndOperationDelegate onEndDeleteBugDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteBugCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProjectsAssignedToDelegate;
        
        private EndOperationDelegate onEndGetProjectsAssignedToDelegate;
        
        private System.Threading.SendOrPostCallback onGetProjectsAssignedToCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllProjectsByUserDelegate;
        
        private EndOperationDelegate onEndGetAllProjectsByUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllProjectsByUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBugsByProjectDelegate;
        
        private EndOperationDelegate onEndGetBugsByProjectDelegate;
        
        private System.Threading.SendOrPostCallback onGetBugsByProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginSearchAllProjectBugsAttributesDelegate;
        
        private EndOperationDelegate onEndSearchAllProjectBugsAttributesDelegate;
        
        private System.Threading.SendOrPostCallback onSearchAllProjectBugsAttributesCompletedDelegate;
        
        private BeginOperationDelegate onBeginCountBugsInProjectDelegate;
        
        private EndOperationDelegate onEndCountBugsInProjectDelegate;
        
        private System.Threading.SendOrPostCallback onCountBugsInProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveBugDelegate;
        
        private EndOperationDelegate onEndSaveBugDelegate;
        
        private System.Threading.SendOrPostCallback onSaveBugCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddBugDelegate;
        
        private EndOperationDelegate onEndAddBugDelegate;
        
        private System.Threading.SendOrPostCallback onAddBugCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMyUserDelegate;
        
        private EndOperationDelegate onEndGetMyUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetMyUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBugPriorityListDelegate;
        
        private EndOperationDelegate onEndGetBugPriorityListDelegate;
        
        private System.Threading.SendOrPostCallback onGetBugPriorityListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUsersByProjectDelegate;
        
        private EndOperationDelegate onEndGetUsersByProjectDelegate;
        
        private System.Threading.SendOrPostCallback onGetUsersByProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAssignedUsersByProjectDelegate;
        
        private EndOperationDelegate onEndGetAssignedUsersByProjectDelegate;
        
        private System.Threading.SendOrPostCallback onGetAssignedUsersByProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetManagerUsersByProjectDelegate;
        
        private EndOperationDelegate onEndGetManagerUsersByProjectDelegate;
        
        private System.Threading.SendOrPostCallback onGetManagerUsersByProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBugStatusListDelegate;
        
        private EndOperationDelegate onEndGetBugStatusListDelegate;
        
        private System.Threading.SendOrPostCallback onGetBugStatusListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProjectsManagedByDelegate;
        
        private EndOperationDelegate onEndGetProjectsManagedByDelegate;
        
        private System.Threading.SendOrPostCallback onGetProjectsManagedByCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddProjectDelegate;
        
        private EndOperationDelegate onEndAddProjectDelegate;
        
        private System.Threading.SendOrPostCallback onAddProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveProjectDelegate;
        
        private EndOperationDelegate onEndSaveProjectDelegate;
        
        private System.Threading.SendOrPostCallback onSaveProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteProjectDelegate;
        
        private EndOperationDelegate onEndDeleteProjectDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginLeaveProjectDelegate;
        
        private EndOperationDelegate onEndLeaveProjectDelegate;
        
        private System.Threading.SendOrPostCallback onLeaveProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequestProjectAssignmentDelegate;
        
        private EndOperationDelegate onEndRequestProjectAssignmentDelegate;
        
        private System.Threading.SendOrPostCallback onRequestProjectAssignmentCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllRolesDelegate;
        
        private EndOperationDelegate onEndGetAllRolesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllRolesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProjectByCodeDelegate;
        
        private EndOperationDelegate onEndGetProjectByCodeDelegate;
        
        private System.Threading.SendOrPostCallback onGetProjectByCodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUsersPendingProjectJoinDelegate;
        
        private EndOperationDelegate onEndGetUsersPendingProjectJoinDelegate;
        
        private System.Threading.SendOrPostCallback onGetUsersPendingProjectJoinCompletedDelegate;
        
        private BeginOperationDelegate onBeginAcceptUserOnProjectDelegate;
        
        private EndOperationDelegate onEndAcceptUserOnProjectDelegate;
        
        private System.Threading.SendOrPostCallback onAcceptUserOnProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginRejectUserFromProjectDelegate;
        
        private EndOperationDelegate onEndRejectUserFromProjectDelegate;
        
        private System.Threading.SendOrPostCallback onRejectUserFromProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsValidProjectCodeDelegate;
        
        private EndOperationDelegate onEndIsValidProjectCodeDelegate;
        
        private System.Threading.SendOrPostCallback onIsValidProjectCodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNumberOfBugsAssignedToUserInProjectDelegate;
        
        private EndOperationDelegate onEndGetNumberOfBugsAssignedToUserInProjectDelegate;
        
        private System.Threading.SendOrPostCallback onGetNumberOfBugsAssignedToUserInProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBugsAssignedToProjectAndUserDelegate;
        
        private EndOperationDelegate onEndGetBugsAssignedToProjectAndUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetBugsAssignedToProjectAndUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveUserCredentialsDelegate;
        
        private EndOperationDelegate onEndSaveUserCredentialsDelegate;
        
        private System.Threading.SendOrPostCallback onSaveUserCredentialsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUserExistsDelegate;
        
        private EndOperationDelegate onEndUserExistsDelegate;
        
        private System.Threading.SendOrPostCallback onUserExistsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOpenBugsInProjectDelegate;
        
        private EndOperationDelegate onEndGetOpenBugsInProjectDelegate;
        
        private System.Threading.SendOrPostCallback onGetOpenBugsInProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBugsInProgressFromProjectDelegate;
        
        private EndOperationDelegate onEndGetBugsInProgressFromProjectDelegate;
        
        private System.Threading.SendOrPostCallback onGetBugsInProgressFromProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetClosedBugsInProjectDelegate;
        
        private EndOperationDelegate onEndGetClosedBugsInProjectDelegate;
        
        private System.Threading.SendOrPostCallback onGetClosedBugsInProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllBugActionLogsInProjectDelegate;
        
        private EndOperationDelegate onEndGetAllBugActionLogsInProjectDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllBugActionLogsInProjectCompletedDelegate;
        
        public TrackerServiceClient() {
        }
        
        public TrackerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TrackerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TrackerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TrackerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetAllBugsCompletedEventArgs> GetAllBugsCompleted;
        
        public event System.EventHandler<DeleteBugsCompletedEventArgs> DeleteBugsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteBugCompleted;
        
        public event System.EventHandler<GetProjectsAssignedToCompletedEventArgs> GetProjectsAssignedToCompleted;
        
        public event System.EventHandler<GetAllProjectsByUserCompletedEventArgs> GetAllProjectsByUserCompleted;
        
        public event System.EventHandler<GetBugsByProjectCompletedEventArgs> GetBugsByProjectCompleted;
        
        public event System.EventHandler<SearchAllProjectBugsAttributesCompletedEventArgs> SearchAllProjectBugsAttributesCompleted;
        
        public event System.EventHandler<CountBugsInProjectCompletedEventArgs> CountBugsInProjectCompleted;
        
        public event System.EventHandler<SaveBugCompletedEventArgs> SaveBugCompleted;
        
        public event System.EventHandler<AddBugCompletedEventArgs> AddBugCompleted;
        
        public event System.EventHandler<GetMyUserCompletedEventArgs> GetMyUserCompleted;
        
        public event System.EventHandler<GetBugPriorityListCompletedEventArgs> GetBugPriorityListCompleted;
        
        public event System.EventHandler<GetUsersByProjectCompletedEventArgs> GetUsersByProjectCompleted;
        
        public event System.EventHandler<GetAssignedUsersByProjectCompletedEventArgs> GetAssignedUsersByProjectCompleted;
        
        public event System.EventHandler<GetManagerUsersByProjectCompletedEventArgs> GetManagerUsersByProjectCompleted;
        
        public event System.EventHandler<GetBugStatusListCompletedEventArgs> GetBugStatusListCompleted;
        
        public event System.EventHandler<GetProjectsManagedByCompletedEventArgs> GetProjectsManagedByCompleted;
        
        public event System.EventHandler<AddProjectCompletedEventArgs> AddProjectCompleted;
        
        public event System.EventHandler<SaveProjectCompletedEventArgs> SaveProjectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteProjectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LeaveProjectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RequestProjectAssignmentCompleted;
        
        public event System.EventHandler<GetAllRolesCompletedEventArgs> GetAllRolesCompleted;
        
        public event System.EventHandler<GetProjectByCodeCompletedEventArgs> GetProjectByCodeCompleted;
        
        public event System.EventHandler<GetUsersPendingProjectJoinCompletedEventArgs> GetUsersPendingProjectJoinCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AcceptUserOnProjectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RejectUserFromProjectCompleted;
        
        public event System.EventHandler<IsValidProjectCodeCompletedEventArgs> IsValidProjectCodeCompleted;
        
        public event System.EventHandler<GetNumberOfBugsAssignedToUserInProjectCompletedEventArgs> GetNumberOfBugsAssignedToUserInProjectCompleted;
        
        public event System.EventHandler<GetBugsAssignedToProjectAndUserCompletedEventArgs> GetBugsAssignedToProjectAndUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveUserCredentialsCompleted;
        
        public event System.EventHandler<UserExistsCompletedEventArgs> UserExistsCompleted;
        
        public event System.EventHandler<GetOpenBugsInProjectCompletedEventArgs> GetOpenBugsInProjectCompleted;
        
        public event System.EventHandler<GetBugsInProgressFromProjectCompletedEventArgs> GetBugsInProgressFromProjectCompleted;
        
        public event System.EventHandler<GetClosedBugsInProjectCompletedEventArgs> GetClosedBugsInProjectCompleted;
        
        public event System.EventHandler<GetAllBugActionLogsInProjectCompletedEventArgs> GetAllBugActionLogsInProjectCompleted;
        
        public System.Collections.Generic.List<Client.ServiceReference.Bug> GetAllBugs() {
            return base.Channel.GetAllBugs();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllBugs(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllBugs(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Client.ServiceReference.Bug> EndGetAllBugs(System.IAsyncResult result) {
            return base.Channel.EndGetAllBugs(result);
        }
        
        private System.IAsyncResult OnBeginGetAllBugs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetAllBugs(callback, asyncState);
        }
        
        private object[] OnEndGetAllBugs(System.IAsyncResult result) {
            System.Collections.Generic.List<Client.ServiceReference.Bug> retVal = this.EndGetAllBugs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllBugsCompleted(object state) {
            if ((this.GetAllBugsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllBugsCompleted(this, new GetAllBugsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllBugsAsync() {
            this.GetAllBugsAsync(null);
        }
        
        public void GetAllBugsAsync(object userState) {
            if ((this.onBeginGetAllBugsDelegate == null)) {
                this.onBeginGetAllBugsDelegate = new BeginOperationDelegate(this.OnBeginGetAllBugs);
            }
            if ((this.onEndGetAllBugsDelegate == null)) {
                this.onEndGetAllBugsDelegate = new EndOperationDelegate(this.OnEndGetAllBugs);
            }
            if ((this.onGetAllBugsCompletedDelegate == null)) {
                this.onGetAllBugsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllBugsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllBugsDelegate, null, this.onEndGetAllBugsDelegate, this.onGetAllBugsCompletedDelegate, userState);
        }
        
        public bool DeleteBugs(System.Collections.Generic.List<Client.ServiceReference.Bug> bugList) {
            return base.Channel.DeleteBugs(bugList);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteBugs(System.Collections.Generic.List<Client.ServiceReference.Bug> bugList, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteBugs(bugList, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeleteBugs(System.IAsyncResult result) {
            return base.Channel.EndDeleteBugs(result);
        }
        
        private System.IAsyncResult OnBeginDeleteBugs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Client.ServiceReference.Bug> bugList = ((System.Collections.Generic.List<Client.ServiceReference.Bug>)(inValues[0]));
            return this.BeginDeleteBugs(bugList, callback, asyncState);
        }
        
        private object[] OnEndDeleteBugs(System.IAsyncResult result) {
            bool retVal = this.EndDeleteBugs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteBugsCompleted(object state) {
            if ((this.DeleteBugsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteBugsCompleted(this, new DeleteBugsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteBugsAsync(System.Collections.Generic.List<Client.ServiceReference.Bug> bugList) {
            this.DeleteBugsAsync(bugList, null);
        }
        
        public void DeleteBugsAsync(System.Collections.Generic.List<Client.ServiceReference.Bug> bugList, object userState) {
            if ((this.onBeginDeleteBugsDelegate == null)) {
                this.onBeginDeleteBugsDelegate = new BeginOperationDelegate(this.OnBeginDeleteBugs);
            }
            if ((this.onEndDeleteBugsDelegate == null)) {
                this.onEndDeleteBugsDelegate = new EndOperationDelegate(this.OnEndDeleteBugs);
            }
            if ((this.onDeleteBugsCompletedDelegate == null)) {
                this.onDeleteBugsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteBugsCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteBugsDelegate, new object[] {
                        bugList}, this.onEndDeleteBugsDelegate, this.onDeleteBugsCompletedDelegate, userState);
        }
        
        public void DeleteBug(Client.ServiceReference.Bug bug) {
            base.Channel.DeleteBug(bug);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteBug(Client.ServiceReference.Bug bug, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteBug(bug, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteBug(System.IAsyncResult result) {
            base.Channel.EndDeleteBug(result);
        }
        
        private System.IAsyncResult OnBeginDeleteBug(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.Bug bug = ((Client.ServiceReference.Bug)(inValues[0]));
            return this.BeginDeleteBug(bug, callback, asyncState);
        }
        
        private object[] OnEndDeleteBug(System.IAsyncResult result) {
            this.EndDeleteBug(result);
            return null;
        }
        
        private void OnDeleteBugCompleted(object state) {
            if ((this.DeleteBugCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteBugCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteBugAsync(Client.ServiceReference.Bug bug) {
            this.DeleteBugAsync(bug, null);
        }
        
        public void DeleteBugAsync(Client.ServiceReference.Bug bug, object userState) {
            if ((this.onBeginDeleteBugDelegate == null)) {
                this.onBeginDeleteBugDelegate = new BeginOperationDelegate(this.OnBeginDeleteBug);
            }
            if ((this.onEndDeleteBugDelegate == null)) {
                this.onEndDeleteBugDelegate = new EndOperationDelegate(this.OnEndDeleteBug);
            }
            if ((this.onDeleteBugCompletedDelegate == null)) {
                this.onDeleteBugCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteBugCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteBugDelegate, new object[] {
                        bug}, this.onEndDeleteBugDelegate, this.onDeleteBugCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.Project> GetProjectsAssignedTo(Client.ServiceReference.User user) {
            return base.Channel.GetProjectsAssignedTo(user);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetProjectsAssignedTo(Client.ServiceReference.User user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProjectsAssignedTo(user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Client.ServiceReference.Project> EndGetProjectsAssignedTo(System.IAsyncResult result) {
            return base.Channel.EndGetProjectsAssignedTo(result);
        }
        
        private System.IAsyncResult OnBeginGetProjectsAssignedTo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.User user = ((Client.ServiceReference.User)(inValues[0]));
            return this.BeginGetProjectsAssignedTo(user, callback, asyncState);
        }
        
        private object[] OnEndGetProjectsAssignedTo(System.IAsyncResult result) {
            System.Collections.Generic.List<Client.ServiceReference.Project> retVal = this.EndGetProjectsAssignedTo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProjectsAssignedToCompleted(object state) {
            if ((this.GetProjectsAssignedToCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProjectsAssignedToCompleted(this, new GetProjectsAssignedToCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProjectsAssignedToAsync(Client.ServiceReference.User user) {
            this.GetProjectsAssignedToAsync(user, null);
        }
        
        public void GetProjectsAssignedToAsync(Client.ServiceReference.User user, object userState) {
            if ((this.onBeginGetProjectsAssignedToDelegate == null)) {
                this.onBeginGetProjectsAssignedToDelegate = new BeginOperationDelegate(this.OnBeginGetProjectsAssignedTo);
            }
            if ((this.onEndGetProjectsAssignedToDelegate == null)) {
                this.onEndGetProjectsAssignedToDelegate = new EndOperationDelegate(this.OnEndGetProjectsAssignedTo);
            }
            if ((this.onGetProjectsAssignedToCompletedDelegate == null)) {
                this.onGetProjectsAssignedToCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProjectsAssignedToCompleted);
            }
            base.InvokeAsync(this.onBeginGetProjectsAssignedToDelegate, new object[] {
                        user}, this.onEndGetProjectsAssignedToDelegate, this.onGetProjectsAssignedToCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.Project> GetAllProjectsByUser(Client.ServiceReference.User user) {
            return base.Channel.GetAllProjectsByUser(user);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllProjectsByUser(Client.ServiceReference.User user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllProjectsByUser(user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Client.ServiceReference.Project> EndGetAllProjectsByUser(System.IAsyncResult result) {
            return base.Channel.EndGetAllProjectsByUser(result);
        }
        
        private System.IAsyncResult OnBeginGetAllProjectsByUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.User user = ((Client.ServiceReference.User)(inValues[0]));
            return this.BeginGetAllProjectsByUser(user, callback, asyncState);
        }
        
        private object[] OnEndGetAllProjectsByUser(System.IAsyncResult result) {
            System.Collections.Generic.List<Client.ServiceReference.Project> retVal = this.EndGetAllProjectsByUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllProjectsByUserCompleted(object state) {
            if ((this.GetAllProjectsByUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllProjectsByUserCompleted(this, new GetAllProjectsByUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllProjectsByUserAsync(Client.ServiceReference.User user) {
            this.GetAllProjectsByUserAsync(user, null);
        }
        
        public void GetAllProjectsByUserAsync(Client.ServiceReference.User user, object userState) {
            if ((this.onBeginGetAllProjectsByUserDelegate == null)) {
                this.onBeginGetAllProjectsByUserDelegate = new BeginOperationDelegate(this.OnBeginGetAllProjectsByUser);
            }
            if ((this.onEndGetAllProjectsByUserDelegate == null)) {
                this.onEndGetAllProjectsByUserDelegate = new EndOperationDelegate(this.OnEndGetAllProjectsByUser);
            }
            if ((this.onGetAllProjectsByUserCompletedDelegate == null)) {
                this.onGetAllProjectsByUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllProjectsByUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllProjectsByUserDelegate, new object[] {
                        user}, this.onEndGetAllProjectsByUserDelegate, this.onGetAllProjectsByUserCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.Bug> GetBugsByProject(Client.ServiceReference.Project project) {
            return base.Channel.GetBugsByProject(project);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetBugsByProject(Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBugsByProject(project, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Client.ServiceReference.Bug> EndGetBugsByProject(System.IAsyncResult result) {
            return base.Channel.EndGetBugsByProject(result);
        }
        
        private System.IAsyncResult OnBeginGetBugsByProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.Project project = ((Client.ServiceReference.Project)(inValues[0]));
            return this.BeginGetBugsByProject(project, callback, asyncState);
        }
        
        private object[] OnEndGetBugsByProject(System.IAsyncResult result) {
            System.Collections.Generic.List<Client.ServiceReference.Bug> retVal = this.EndGetBugsByProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBugsByProjectCompleted(object state) {
            if ((this.GetBugsByProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBugsByProjectCompleted(this, new GetBugsByProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBugsByProjectAsync(Client.ServiceReference.Project project) {
            this.GetBugsByProjectAsync(project, null);
        }
        
        public void GetBugsByProjectAsync(Client.ServiceReference.Project project, object userState) {
            if ((this.onBeginGetBugsByProjectDelegate == null)) {
                this.onBeginGetBugsByProjectDelegate = new BeginOperationDelegate(this.OnBeginGetBugsByProject);
            }
            if ((this.onEndGetBugsByProjectDelegate == null)) {
                this.onEndGetBugsByProjectDelegate = new EndOperationDelegate(this.OnEndGetBugsByProject);
            }
            if ((this.onGetBugsByProjectCompletedDelegate == null)) {
                this.onGetBugsByProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBugsByProjectCompleted);
            }
            base.InvokeAsync(this.onBeginGetBugsByProjectDelegate, new object[] {
                        project}, this.onEndGetBugsByProjectDelegate, this.onGetBugsByProjectCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.Bug> SearchAllProjectBugsAttributes(Client.ServiceReference.Project project, string searchText) {
            return base.Channel.SearchAllProjectBugsAttributes(project, searchText);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSearchAllProjectBugsAttributes(Client.ServiceReference.Project project, string searchText, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSearchAllProjectBugsAttributes(project, searchText, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Client.ServiceReference.Bug> EndSearchAllProjectBugsAttributes(System.IAsyncResult result) {
            return base.Channel.EndSearchAllProjectBugsAttributes(result);
        }
        
        private System.IAsyncResult OnBeginSearchAllProjectBugsAttributes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.Project project = ((Client.ServiceReference.Project)(inValues[0]));
            string searchText = ((string)(inValues[1]));
            return this.BeginSearchAllProjectBugsAttributes(project, searchText, callback, asyncState);
        }
        
        private object[] OnEndSearchAllProjectBugsAttributes(System.IAsyncResult result) {
            System.Collections.Generic.List<Client.ServiceReference.Bug> retVal = this.EndSearchAllProjectBugsAttributes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSearchAllProjectBugsAttributesCompleted(object state) {
            if ((this.SearchAllProjectBugsAttributesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SearchAllProjectBugsAttributesCompleted(this, new SearchAllProjectBugsAttributesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SearchAllProjectBugsAttributesAsync(Client.ServiceReference.Project project, string searchText) {
            this.SearchAllProjectBugsAttributesAsync(project, searchText, null);
        }
        
        public void SearchAllProjectBugsAttributesAsync(Client.ServiceReference.Project project, string searchText, object userState) {
            if ((this.onBeginSearchAllProjectBugsAttributesDelegate == null)) {
                this.onBeginSearchAllProjectBugsAttributesDelegate = new BeginOperationDelegate(this.OnBeginSearchAllProjectBugsAttributes);
            }
            if ((this.onEndSearchAllProjectBugsAttributesDelegate == null)) {
                this.onEndSearchAllProjectBugsAttributesDelegate = new EndOperationDelegate(this.OnEndSearchAllProjectBugsAttributes);
            }
            if ((this.onSearchAllProjectBugsAttributesCompletedDelegate == null)) {
                this.onSearchAllProjectBugsAttributesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSearchAllProjectBugsAttributesCompleted);
            }
            base.InvokeAsync(this.onBeginSearchAllProjectBugsAttributesDelegate, new object[] {
                        project,
                        searchText}, this.onEndSearchAllProjectBugsAttributesDelegate, this.onSearchAllProjectBugsAttributesCompletedDelegate, userState);
        }
        
        public int CountBugsInProject(Client.ServiceReference.Project project) {
            return base.Channel.CountBugsInProject(project);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCountBugsInProject(Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCountBugsInProject(project, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndCountBugsInProject(System.IAsyncResult result) {
            return base.Channel.EndCountBugsInProject(result);
        }
        
        private System.IAsyncResult OnBeginCountBugsInProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.Project project = ((Client.ServiceReference.Project)(inValues[0]));
            return this.BeginCountBugsInProject(project, callback, asyncState);
        }
        
        private object[] OnEndCountBugsInProject(System.IAsyncResult result) {
            int retVal = this.EndCountBugsInProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCountBugsInProjectCompleted(object state) {
            if ((this.CountBugsInProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CountBugsInProjectCompleted(this, new CountBugsInProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CountBugsInProjectAsync(Client.ServiceReference.Project project) {
            this.CountBugsInProjectAsync(project, null);
        }
        
        public void CountBugsInProjectAsync(Client.ServiceReference.Project project, object userState) {
            if ((this.onBeginCountBugsInProjectDelegate == null)) {
                this.onBeginCountBugsInProjectDelegate = new BeginOperationDelegate(this.OnBeginCountBugsInProject);
            }
            if ((this.onEndCountBugsInProjectDelegate == null)) {
                this.onEndCountBugsInProjectDelegate = new EndOperationDelegate(this.OnEndCountBugsInProject);
            }
            if ((this.onCountBugsInProjectCompletedDelegate == null)) {
                this.onCountBugsInProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCountBugsInProjectCompleted);
            }
            base.InvokeAsync(this.onBeginCountBugsInProjectDelegate, new object[] {
                        project}, this.onEndCountBugsInProjectDelegate, this.onCountBugsInProjectCompletedDelegate, userState);
        }
        
        public Client.ServiceReference.Bug SaveBug(Client.ServiceReference.Bug bug) {
            return base.Channel.SaveBug(bug);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveBug(Client.ServiceReference.Bug bug, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveBug(bug, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Client.ServiceReference.Bug EndSaveBug(System.IAsyncResult result) {
            return base.Channel.EndSaveBug(result);
        }
        
        private System.IAsyncResult OnBeginSaveBug(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.Bug bug = ((Client.ServiceReference.Bug)(inValues[0]));
            return this.BeginSaveBug(bug, callback, asyncState);
        }
        
        private object[] OnEndSaveBug(System.IAsyncResult result) {
            Client.ServiceReference.Bug retVal = this.EndSaveBug(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveBugCompleted(object state) {
            if ((this.SaveBugCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveBugCompleted(this, new SaveBugCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveBugAsync(Client.ServiceReference.Bug bug) {
            this.SaveBugAsync(bug, null);
        }
        
        public void SaveBugAsync(Client.ServiceReference.Bug bug, object userState) {
            if ((this.onBeginSaveBugDelegate == null)) {
                this.onBeginSaveBugDelegate = new BeginOperationDelegate(this.OnBeginSaveBug);
            }
            if ((this.onEndSaveBugDelegate == null)) {
                this.onEndSaveBugDelegate = new EndOperationDelegate(this.OnEndSaveBug);
            }
            if ((this.onSaveBugCompletedDelegate == null)) {
                this.onSaveBugCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveBugCompleted);
            }
            base.InvokeAsync(this.onBeginSaveBugDelegate, new object[] {
                        bug}, this.onEndSaveBugDelegate, this.onSaveBugCompletedDelegate, userState);
        }
        
        public Client.ServiceReference.Bug AddBug(Client.ServiceReference.Bug bug) {
            return base.Channel.AddBug(bug);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddBug(Client.ServiceReference.Bug bug, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddBug(bug, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Client.ServiceReference.Bug EndAddBug(System.IAsyncResult result) {
            return base.Channel.EndAddBug(result);
        }
        
        private System.IAsyncResult OnBeginAddBug(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.Bug bug = ((Client.ServiceReference.Bug)(inValues[0]));
            return this.BeginAddBug(bug, callback, asyncState);
        }
        
        private object[] OnEndAddBug(System.IAsyncResult result) {
            Client.ServiceReference.Bug retVal = this.EndAddBug(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddBugCompleted(object state) {
            if ((this.AddBugCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddBugCompleted(this, new AddBugCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddBugAsync(Client.ServiceReference.Bug bug) {
            this.AddBugAsync(bug, null);
        }
        
        public void AddBugAsync(Client.ServiceReference.Bug bug, object userState) {
            if ((this.onBeginAddBugDelegate == null)) {
                this.onBeginAddBugDelegate = new BeginOperationDelegate(this.OnBeginAddBug);
            }
            if ((this.onEndAddBugDelegate == null)) {
                this.onEndAddBugDelegate = new EndOperationDelegate(this.OnEndAddBug);
            }
            if ((this.onAddBugCompletedDelegate == null)) {
                this.onAddBugCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddBugCompleted);
            }
            base.InvokeAsync(this.onBeginAddBugDelegate, new object[] {
                        bug}, this.onEndAddBugDelegate, this.onAddBugCompletedDelegate, userState);
        }
        
        public Client.ServiceReference.User GetMyUser() {
            return base.Channel.GetMyUser();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMyUser(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMyUser(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Client.ServiceReference.User EndGetMyUser(System.IAsyncResult result) {
            return base.Channel.EndGetMyUser(result);
        }
        
        private System.IAsyncResult OnBeginGetMyUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetMyUser(callback, asyncState);
        }
        
        private object[] OnEndGetMyUser(System.IAsyncResult result) {
            Client.ServiceReference.User retVal = this.EndGetMyUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMyUserCompleted(object state) {
            if ((this.GetMyUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMyUserCompleted(this, new GetMyUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMyUserAsync() {
            this.GetMyUserAsync(null);
        }
        
        public void GetMyUserAsync(object userState) {
            if ((this.onBeginGetMyUserDelegate == null)) {
                this.onBeginGetMyUserDelegate = new BeginOperationDelegate(this.OnBeginGetMyUser);
            }
            if ((this.onEndGetMyUserDelegate == null)) {
                this.onEndGetMyUserDelegate = new EndOperationDelegate(this.OnEndGetMyUser);
            }
            if ((this.onGetMyUserCompletedDelegate == null)) {
                this.onGetMyUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMyUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetMyUserDelegate, null, this.onEndGetMyUserDelegate, this.onGetMyUserCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<string> GetBugPriorityList() {
            return base.Channel.GetBugPriorityList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetBugPriorityList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBugPriorityList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<string> EndGetBugPriorityList(System.IAsyncResult result) {
            return base.Channel.EndGetBugPriorityList(result);
        }
        
        private System.IAsyncResult OnBeginGetBugPriorityList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetBugPriorityList(callback, asyncState);
        }
        
        private object[] OnEndGetBugPriorityList(System.IAsyncResult result) {
            System.Collections.Generic.List<string> retVal = this.EndGetBugPriorityList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBugPriorityListCompleted(object state) {
            if ((this.GetBugPriorityListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBugPriorityListCompleted(this, new GetBugPriorityListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBugPriorityListAsync() {
            this.GetBugPriorityListAsync(null);
        }
        
        public void GetBugPriorityListAsync(object userState) {
            if ((this.onBeginGetBugPriorityListDelegate == null)) {
                this.onBeginGetBugPriorityListDelegate = new BeginOperationDelegate(this.OnBeginGetBugPriorityList);
            }
            if ((this.onEndGetBugPriorityListDelegate == null)) {
                this.onEndGetBugPriorityListDelegate = new EndOperationDelegate(this.OnEndGetBugPriorityList);
            }
            if ((this.onGetBugPriorityListCompletedDelegate == null)) {
                this.onGetBugPriorityListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBugPriorityListCompleted);
            }
            base.InvokeAsync(this.onBeginGetBugPriorityListDelegate, null, this.onEndGetBugPriorityListDelegate, this.onGetBugPriorityListCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.User> GetUsersByProject(Client.ServiceReference.Project proj) {
            return base.Channel.GetUsersByProject(proj);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUsersByProject(Client.ServiceReference.Project proj, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUsersByProject(proj, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Client.ServiceReference.User> EndGetUsersByProject(System.IAsyncResult result) {
            return base.Channel.EndGetUsersByProject(result);
        }
        
        private System.IAsyncResult OnBeginGetUsersByProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.Project proj = ((Client.ServiceReference.Project)(inValues[0]));
            return this.BeginGetUsersByProject(proj, callback, asyncState);
        }
        
        private object[] OnEndGetUsersByProject(System.IAsyncResult result) {
            System.Collections.Generic.List<Client.ServiceReference.User> retVal = this.EndGetUsersByProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUsersByProjectCompleted(object state) {
            if ((this.GetUsersByProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUsersByProjectCompleted(this, new GetUsersByProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUsersByProjectAsync(Client.ServiceReference.Project proj) {
            this.GetUsersByProjectAsync(proj, null);
        }
        
        public void GetUsersByProjectAsync(Client.ServiceReference.Project proj, object userState) {
            if ((this.onBeginGetUsersByProjectDelegate == null)) {
                this.onBeginGetUsersByProjectDelegate = new BeginOperationDelegate(this.OnBeginGetUsersByProject);
            }
            if ((this.onEndGetUsersByProjectDelegate == null)) {
                this.onEndGetUsersByProjectDelegate = new EndOperationDelegate(this.OnEndGetUsersByProject);
            }
            if ((this.onGetUsersByProjectCompletedDelegate == null)) {
                this.onGetUsersByProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUsersByProjectCompleted);
            }
            base.InvokeAsync(this.onBeginGetUsersByProjectDelegate, new object[] {
                        proj}, this.onEndGetUsersByProjectDelegate, this.onGetUsersByProjectCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.User> GetAssignedUsersByProject(Client.ServiceReference.Project proj) {
            return base.Channel.GetAssignedUsersByProject(proj);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAssignedUsersByProject(Client.ServiceReference.Project proj, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAssignedUsersByProject(proj, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Client.ServiceReference.User> EndGetAssignedUsersByProject(System.IAsyncResult result) {
            return base.Channel.EndGetAssignedUsersByProject(result);
        }
        
        private System.IAsyncResult OnBeginGetAssignedUsersByProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.Project proj = ((Client.ServiceReference.Project)(inValues[0]));
            return this.BeginGetAssignedUsersByProject(proj, callback, asyncState);
        }
        
        private object[] OnEndGetAssignedUsersByProject(System.IAsyncResult result) {
            System.Collections.Generic.List<Client.ServiceReference.User> retVal = this.EndGetAssignedUsersByProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAssignedUsersByProjectCompleted(object state) {
            if ((this.GetAssignedUsersByProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAssignedUsersByProjectCompleted(this, new GetAssignedUsersByProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAssignedUsersByProjectAsync(Client.ServiceReference.Project proj) {
            this.GetAssignedUsersByProjectAsync(proj, null);
        }
        
        public void GetAssignedUsersByProjectAsync(Client.ServiceReference.Project proj, object userState) {
            if ((this.onBeginGetAssignedUsersByProjectDelegate == null)) {
                this.onBeginGetAssignedUsersByProjectDelegate = new BeginOperationDelegate(this.OnBeginGetAssignedUsersByProject);
            }
            if ((this.onEndGetAssignedUsersByProjectDelegate == null)) {
                this.onEndGetAssignedUsersByProjectDelegate = new EndOperationDelegate(this.OnEndGetAssignedUsersByProject);
            }
            if ((this.onGetAssignedUsersByProjectCompletedDelegate == null)) {
                this.onGetAssignedUsersByProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAssignedUsersByProjectCompleted);
            }
            base.InvokeAsync(this.onBeginGetAssignedUsersByProjectDelegate, new object[] {
                        proj}, this.onEndGetAssignedUsersByProjectDelegate, this.onGetAssignedUsersByProjectCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.User> GetManagerUsersByProject(Client.ServiceReference.Project proj) {
            return base.Channel.GetManagerUsersByProject(proj);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetManagerUsersByProject(Client.ServiceReference.Project proj, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetManagerUsersByProject(proj, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Client.ServiceReference.User> EndGetManagerUsersByProject(System.IAsyncResult result) {
            return base.Channel.EndGetManagerUsersByProject(result);
        }
        
        private System.IAsyncResult OnBeginGetManagerUsersByProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.Project proj = ((Client.ServiceReference.Project)(inValues[0]));
            return this.BeginGetManagerUsersByProject(proj, callback, asyncState);
        }
        
        private object[] OnEndGetManagerUsersByProject(System.IAsyncResult result) {
            System.Collections.Generic.List<Client.ServiceReference.User> retVal = this.EndGetManagerUsersByProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetManagerUsersByProjectCompleted(object state) {
            if ((this.GetManagerUsersByProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetManagerUsersByProjectCompleted(this, new GetManagerUsersByProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetManagerUsersByProjectAsync(Client.ServiceReference.Project proj) {
            this.GetManagerUsersByProjectAsync(proj, null);
        }
        
        public void GetManagerUsersByProjectAsync(Client.ServiceReference.Project proj, object userState) {
            if ((this.onBeginGetManagerUsersByProjectDelegate == null)) {
                this.onBeginGetManagerUsersByProjectDelegate = new BeginOperationDelegate(this.OnBeginGetManagerUsersByProject);
            }
            if ((this.onEndGetManagerUsersByProjectDelegate == null)) {
                this.onEndGetManagerUsersByProjectDelegate = new EndOperationDelegate(this.OnEndGetManagerUsersByProject);
            }
            if ((this.onGetManagerUsersByProjectCompletedDelegate == null)) {
                this.onGetManagerUsersByProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetManagerUsersByProjectCompleted);
            }
            base.InvokeAsync(this.onBeginGetManagerUsersByProjectDelegate, new object[] {
                        proj}, this.onEndGetManagerUsersByProjectDelegate, this.onGetManagerUsersByProjectCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<string> GetBugStatusList() {
            return base.Channel.GetBugStatusList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetBugStatusList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBugStatusList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<string> EndGetBugStatusList(System.IAsyncResult result) {
            return base.Channel.EndGetBugStatusList(result);
        }
        
        private System.IAsyncResult OnBeginGetBugStatusList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetBugStatusList(callback, asyncState);
        }
        
        private object[] OnEndGetBugStatusList(System.IAsyncResult result) {
            System.Collections.Generic.List<string> retVal = this.EndGetBugStatusList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBugStatusListCompleted(object state) {
            if ((this.GetBugStatusListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBugStatusListCompleted(this, new GetBugStatusListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBugStatusListAsync() {
            this.GetBugStatusListAsync(null);
        }
        
        public void GetBugStatusListAsync(object userState) {
            if ((this.onBeginGetBugStatusListDelegate == null)) {
                this.onBeginGetBugStatusListDelegate = new BeginOperationDelegate(this.OnBeginGetBugStatusList);
            }
            if ((this.onEndGetBugStatusListDelegate == null)) {
                this.onEndGetBugStatusListDelegate = new EndOperationDelegate(this.OnEndGetBugStatusList);
            }
            if ((this.onGetBugStatusListCompletedDelegate == null)) {
                this.onGetBugStatusListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBugStatusListCompleted);
            }
            base.InvokeAsync(this.onBeginGetBugStatusListDelegate, null, this.onEndGetBugStatusListDelegate, this.onGetBugStatusListCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.Project> GetProjectsManagedBy(Client.ServiceReference.User user) {
            return base.Channel.GetProjectsManagedBy(user);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetProjectsManagedBy(Client.ServiceReference.User user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProjectsManagedBy(user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Client.ServiceReference.Project> EndGetProjectsManagedBy(System.IAsyncResult result) {
            return base.Channel.EndGetProjectsManagedBy(result);
        }
        
        private System.IAsyncResult OnBeginGetProjectsManagedBy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.User user = ((Client.ServiceReference.User)(inValues[0]));
            return this.BeginGetProjectsManagedBy(user, callback, asyncState);
        }
        
        private object[] OnEndGetProjectsManagedBy(System.IAsyncResult result) {
            System.Collections.Generic.List<Client.ServiceReference.Project> retVal = this.EndGetProjectsManagedBy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProjectsManagedByCompleted(object state) {
            if ((this.GetProjectsManagedByCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProjectsManagedByCompleted(this, new GetProjectsManagedByCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProjectsManagedByAsync(Client.ServiceReference.User user) {
            this.GetProjectsManagedByAsync(user, null);
        }
        
        public void GetProjectsManagedByAsync(Client.ServiceReference.User user, object userState) {
            if ((this.onBeginGetProjectsManagedByDelegate == null)) {
                this.onBeginGetProjectsManagedByDelegate = new BeginOperationDelegate(this.OnBeginGetProjectsManagedBy);
            }
            if ((this.onEndGetProjectsManagedByDelegate == null)) {
                this.onEndGetProjectsManagedByDelegate = new EndOperationDelegate(this.OnEndGetProjectsManagedBy);
            }
            if ((this.onGetProjectsManagedByCompletedDelegate == null)) {
                this.onGetProjectsManagedByCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProjectsManagedByCompleted);
            }
            base.InvokeAsync(this.onBeginGetProjectsManagedByDelegate, new object[] {
                        user}, this.onEndGetProjectsManagedByDelegate, this.onGetProjectsManagedByCompletedDelegate, userState);
        }
        
        public Client.ServiceReference.Project AddProject(Client.ServiceReference.Project project) {
            return base.Channel.AddProject(project);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddProject(Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddProject(project, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Client.ServiceReference.Project EndAddProject(System.IAsyncResult result) {
            return base.Channel.EndAddProject(result);
        }
        
        private System.IAsyncResult OnBeginAddProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.Project project = ((Client.ServiceReference.Project)(inValues[0]));
            return this.BeginAddProject(project, callback, asyncState);
        }
        
        private object[] OnEndAddProject(System.IAsyncResult result) {
            Client.ServiceReference.Project retVal = this.EndAddProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddProjectCompleted(object state) {
            if ((this.AddProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddProjectCompleted(this, new AddProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddProjectAsync(Client.ServiceReference.Project project) {
            this.AddProjectAsync(project, null);
        }
        
        public void AddProjectAsync(Client.ServiceReference.Project project, object userState) {
            if ((this.onBeginAddProjectDelegate == null)) {
                this.onBeginAddProjectDelegate = new BeginOperationDelegate(this.OnBeginAddProject);
            }
            if ((this.onEndAddProjectDelegate == null)) {
                this.onEndAddProjectDelegate = new EndOperationDelegate(this.OnEndAddProject);
            }
            if ((this.onAddProjectCompletedDelegate == null)) {
                this.onAddProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddProjectCompleted);
            }
            base.InvokeAsync(this.onBeginAddProjectDelegate, new object[] {
                        project}, this.onEndAddProjectDelegate, this.onAddProjectCompletedDelegate, userState);
        }
        
        public Client.ServiceReference.Project SaveProject(Client.ServiceReference.Project project) {
            return base.Channel.SaveProject(project);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveProject(Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveProject(project, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Client.ServiceReference.Project EndSaveProject(System.IAsyncResult result) {
            return base.Channel.EndSaveProject(result);
        }
        
        private System.IAsyncResult OnBeginSaveProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.Project project = ((Client.ServiceReference.Project)(inValues[0]));
            return this.BeginSaveProject(project, callback, asyncState);
        }
        
        private object[] OnEndSaveProject(System.IAsyncResult result) {
            Client.ServiceReference.Project retVal = this.EndSaveProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveProjectCompleted(object state) {
            if ((this.SaveProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveProjectCompleted(this, new SaveProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveProjectAsync(Client.ServiceReference.Project project) {
            this.SaveProjectAsync(project, null);
        }
        
        public void SaveProjectAsync(Client.ServiceReference.Project project, object userState) {
            if ((this.onBeginSaveProjectDelegate == null)) {
                this.onBeginSaveProjectDelegate = new BeginOperationDelegate(this.OnBeginSaveProject);
            }
            if ((this.onEndSaveProjectDelegate == null)) {
                this.onEndSaveProjectDelegate = new EndOperationDelegate(this.OnEndSaveProject);
            }
            if ((this.onSaveProjectCompletedDelegate == null)) {
                this.onSaveProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveProjectCompleted);
            }
            base.InvokeAsync(this.onBeginSaveProjectDelegate, new object[] {
                        project}, this.onEndSaveProjectDelegate, this.onSaveProjectCompletedDelegate, userState);
        }
        
        public void DeleteProject(Client.ServiceReference.Project project) {
            base.Channel.DeleteProject(project);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteProject(Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteProject(project, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteProject(System.IAsyncResult result) {
            base.Channel.EndDeleteProject(result);
        }
        
        private System.IAsyncResult OnBeginDeleteProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.Project project = ((Client.ServiceReference.Project)(inValues[0]));
            return this.BeginDeleteProject(project, callback, asyncState);
        }
        
        private object[] OnEndDeleteProject(System.IAsyncResult result) {
            this.EndDeleteProject(result);
            return null;
        }
        
        private void OnDeleteProjectCompleted(object state) {
            if ((this.DeleteProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteProjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteProjectAsync(Client.ServiceReference.Project project) {
            this.DeleteProjectAsync(project, null);
        }
        
        public void DeleteProjectAsync(Client.ServiceReference.Project project, object userState) {
            if ((this.onBeginDeleteProjectDelegate == null)) {
                this.onBeginDeleteProjectDelegate = new BeginOperationDelegate(this.OnBeginDeleteProject);
            }
            if ((this.onEndDeleteProjectDelegate == null)) {
                this.onEndDeleteProjectDelegate = new EndOperationDelegate(this.OnEndDeleteProject);
            }
            if ((this.onDeleteProjectCompletedDelegate == null)) {
                this.onDeleteProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteProjectCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteProjectDelegate, new object[] {
                        project}, this.onEndDeleteProjectDelegate, this.onDeleteProjectCompletedDelegate, userState);
        }
        
        public void LeaveProject(Client.ServiceReference.Project project, Client.ServiceReference.User user) {
            base.Channel.LeaveProject(project, user);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLeaveProject(Client.ServiceReference.Project project, Client.ServiceReference.User user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLeaveProject(project, user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndLeaveProject(System.IAsyncResult result) {
            base.Channel.EndLeaveProject(result);
        }
        
        private System.IAsyncResult OnBeginLeaveProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.Project project = ((Client.ServiceReference.Project)(inValues[0]));
            Client.ServiceReference.User user = ((Client.ServiceReference.User)(inValues[1]));
            return this.BeginLeaveProject(project, user, callback, asyncState);
        }
        
        private object[] OnEndLeaveProject(System.IAsyncResult result) {
            this.EndLeaveProject(result);
            return null;
        }
        
        private void OnLeaveProjectCompleted(object state) {
            if ((this.LeaveProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LeaveProjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LeaveProjectAsync(Client.ServiceReference.Project project, Client.ServiceReference.User user) {
            this.LeaveProjectAsync(project, user, null);
        }
        
        public void LeaveProjectAsync(Client.ServiceReference.Project project, Client.ServiceReference.User user, object userState) {
            if ((this.onBeginLeaveProjectDelegate == null)) {
                this.onBeginLeaveProjectDelegate = new BeginOperationDelegate(this.OnBeginLeaveProject);
            }
            if ((this.onEndLeaveProjectDelegate == null)) {
                this.onEndLeaveProjectDelegate = new EndOperationDelegate(this.OnEndLeaveProject);
            }
            if ((this.onLeaveProjectCompletedDelegate == null)) {
                this.onLeaveProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLeaveProjectCompleted);
            }
            base.InvokeAsync(this.onBeginLeaveProjectDelegate, new object[] {
                        project,
                        user}, this.onEndLeaveProjectDelegate, this.onLeaveProjectCompletedDelegate, userState);
        }
        
        public void RequestProjectAssignment(string code, Client.ServiceReference.User user, Client.ServiceReference.Role role) {
            base.Channel.RequestProjectAssignment(code, user, role);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequestProjectAssignment(string code, Client.ServiceReference.User user, Client.ServiceReference.Role role, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequestProjectAssignment(code, user, role, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRequestProjectAssignment(System.IAsyncResult result) {
            base.Channel.EndRequestProjectAssignment(result);
        }
        
        private System.IAsyncResult OnBeginRequestProjectAssignment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string code = ((string)(inValues[0]));
            Client.ServiceReference.User user = ((Client.ServiceReference.User)(inValues[1]));
            Client.ServiceReference.Role role = ((Client.ServiceReference.Role)(inValues[2]));
            return this.BeginRequestProjectAssignment(code, user, role, callback, asyncState);
        }
        
        private object[] OnEndRequestProjectAssignment(System.IAsyncResult result) {
            this.EndRequestProjectAssignment(result);
            return null;
        }
        
        private void OnRequestProjectAssignmentCompleted(object state) {
            if ((this.RequestProjectAssignmentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RequestProjectAssignmentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RequestProjectAssignmentAsync(string code, Client.ServiceReference.User user, Client.ServiceReference.Role role) {
            this.RequestProjectAssignmentAsync(code, user, role, null);
        }
        
        public void RequestProjectAssignmentAsync(string code, Client.ServiceReference.User user, Client.ServiceReference.Role role, object userState) {
            if ((this.onBeginRequestProjectAssignmentDelegate == null)) {
                this.onBeginRequestProjectAssignmentDelegate = new BeginOperationDelegate(this.OnBeginRequestProjectAssignment);
            }
            if ((this.onEndRequestProjectAssignmentDelegate == null)) {
                this.onEndRequestProjectAssignmentDelegate = new EndOperationDelegate(this.OnEndRequestProjectAssignment);
            }
            if ((this.onRequestProjectAssignmentCompletedDelegate == null)) {
                this.onRequestProjectAssignmentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequestProjectAssignmentCompleted);
            }
            base.InvokeAsync(this.onBeginRequestProjectAssignmentDelegate, new object[] {
                        code,
                        user,
                        role}, this.onEndRequestProjectAssignmentDelegate, this.onRequestProjectAssignmentCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.Role> GetAllRoles() {
            return base.Channel.GetAllRoles();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllRoles(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllRoles(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Client.ServiceReference.Role> EndGetAllRoles(System.IAsyncResult result) {
            return base.Channel.EndGetAllRoles(result);
        }
        
        private System.IAsyncResult OnBeginGetAllRoles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetAllRoles(callback, asyncState);
        }
        
        private object[] OnEndGetAllRoles(System.IAsyncResult result) {
            System.Collections.Generic.List<Client.ServiceReference.Role> retVal = this.EndGetAllRoles(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllRolesCompleted(object state) {
            if ((this.GetAllRolesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllRolesCompleted(this, new GetAllRolesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllRolesAsync() {
            this.GetAllRolesAsync(null);
        }
        
        public void GetAllRolesAsync(object userState) {
            if ((this.onBeginGetAllRolesDelegate == null)) {
                this.onBeginGetAllRolesDelegate = new BeginOperationDelegate(this.OnBeginGetAllRoles);
            }
            if ((this.onEndGetAllRolesDelegate == null)) {
                this.onEndGetAllRolesDelegate = new EndOperationDelegate(this.OnEndGetAllRoles);
            }
            if ((this.onGetAllRolesCompletedDelegate == null)) {
                this.onGetAllRolesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllRolesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllRolesDelegate, null, this.onEndGetAllRolesDelegate, this.onGetAllRolesCompletedDelegate, userState);
        }
        
        public Client.ServiceReference.Project GetProjectByCode(string projectCode) {
            return base.Channel.GetProjectByCode(projectCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetProjectByCode(string projectCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProjectByCode(projectCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Client.ServiceReference.Project EndGetProjectByCode(System.IAsyncResult result) {
            return base.Channel.EndGetProjectByCode(result);
        }
        
        private System.IAsyncResult OnBeginGetProjectByCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string projectCode = ((string)(inValues[0]));
            return this.BeginGetProjectByCode(projectCode, callback, asyncState);
        }
        
        private object[] OnEndGetProjectByCode(System.IAsyncResult result) {
            Client.ServiceReference.Project retVal = this.EndGetProjectByCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProjectByCodeCompleted(object state) {
            if ((this.GetProjectByCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProjectByCodeCompleted(this, new GetProjectByCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProjectByCodeAsync(string projectCode) {
            this.GetProjectByCodeAsync(projectCode, null);
        }
        
        public void GetProjectByCodeAsync(string projectCode, object userState) {
            if ((this.onBeginGetProjectByCodeDelegate == null)) {
                this.onBeginGetProjectByCodeDelegate = new BeginOperationDelegate(this.OnBeginGetProjectByCode);
            }
            if ((this.onEndGetProjectByCodeDelegate == null)) {
                this.onEndGetProjectByCodeDelegate = new EndOperationDelegate(this.OnEndGetProjectByCode);
            }
            if ((this.onGetProjectByCodeCompletedDelegate == null)) {
                this.onGetProjectByCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProjectByCodeCompleted);
            }
            base.InvokeAsync(this.onBeginGetProjectByCodeDelegate, new object[] {
                        projectCode}, this.onEndGetProjectByCodeDelegate, this.onGetProjectByCodeCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.User> GetUsersPendingProjectJoin(Client.ServiceReference.Project project) {
            return base.Channel.GetUsersPendingProjectJoin(project);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUsersPendingProjectJoin(Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUsersPendingProjectJoin(project, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Client.ServiceReference.User> EndGetUsersPendingProjectJoin(System.IAsyncResult result) {
            return base.Channel.EndGetUsersPendingProjectJoin(result);
        }
        
        private System.IAsyncResult OnBeginGetUsersPendingProjectJoin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.Project project = ((Client.ServiceReference.Project)(inValues[0]));
            return this.BeginGetUsersPendingProjectJoin(project, callback, asyncState);
        }
        
        private object[] OnEndGetUsersPendingProjectJoin(System.IAsyncResult result) {
            System.Collections.Generic.List<Client.ServiceReference.User> retVal = this.EndGetUsersPendingProjectJoin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUsersPendingProjectJoinCompleted(object state) {
            if ((this.GetUsersPendingProjectJoinCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUsersPendingProjectJoinCompleted(this, new GetUsersPendingProjectJoinCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUsersPendingProjectJoinAsync(Client.ServiceReference.Project project) {
            this.GetUsersPendingProjectJoinAsync(project, null);
        }
        
        public void GetUsersPendingProjectJoinAsync(Client.ServiceReference.Project project, object userState) {
            if ((this.onBeginGetUsersPendingProjectJoinDelegate == null)) {
                this.onBeginGetUsersPendingProjectJoinDelegate = new BeginOperationDelegate(this.OnBeginGetUsersPendingProjectJoin);
            }
            if ((this.onEndGetUsersPendingProjectJoinDelegate == null)) {
                this.onEndGetUsersPendingProjectJoinDelegate = new EndOperationDelegate(this.OnEndGetUsersPendingProjectJoin);
            }
            if ((this.onGetUsersPendingProjectJoinCompletedDelegate == null)) {
                this.onGetUsersPendingProjectJoinCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUsersPendingProjectJoinCompleted);
            }
            base.InvokeAsync(this.onBeginGetUsersPendingProjectJoinDelegate, new object[] {
                        project}, this.onEndGetUsersPendingProjectJoinDelegate, this.onGetUsersPendingProjectJoinCompletedDelegate, userState);
        }
        
        public void AcceptUserOnProject(Client.ServiceReference.User user, Client.ServiceReference.Project project) {
            base.Channel.AcceptUserOnProject(user, project);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAcceptUserOnProject(Client.ServiceReference.User user, Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAcceptUserOnProject(user, project, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAcceptUserOnProject(System.IAsyncResult result) {
            base.Channel.EndAcceptUserOnProject(result);
        }
        
        private System.IAsyncResult OnBeginAcceptUserOnProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.User user = ((Client.ServiceReference.User)(inValues[0]));
            Client.ServiceReference.Project project = ((Client.ServiceReference.Project)(inValues[1]));
            return this.BeginAcceptUserOnProject(user, project, callback, asyncState);
        }
        
        private object[] OnEndAcceptUserOnProject(System.IAsyncResult result) {
            this.EndAcceptUserOnProject(result);
            return null;
        }
        
        private void OnAcceptUserOnProjectCompleted(object state) {
            if ((this.AcceptUserOnProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AcceptUserOnProjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AcceptUserOnProjectAsync(Client.ServiceReference.User user, Client.ServiceReference.Project project) {
            this.AcceptUserOnProjectAsync(user, project, null);
        }
        
        public void AcceptUserOnProjectAsync(Client.ServiceReference.User user, Client.ServiceReference.Project project, object userState) {
            if ((this.onBeginAcceptUserOnProjectDelegate == null)) {
                this.onBeginAcceptUserOnProjectDelegate = new BeginOperationDelegate(this.OnBeginAcceptUserOnProject);
            }
            if ((this.onEndAcceptUserOnProjectDelegate == null)) {
                this.onEndAcceptUserOnProjectDelegate = new EndOperationDelegate(this.OnEndAcceptUserOnProject);
            }
            if ((this.onAcceptUserOnProjectCompletedDelegate == null)) {
                this.onAcceptUserOnProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAcceptUserOnProjectCompleted);
            }
            base.InvokeAsync(this.onBeginAcceptUserOnProjectDelegate, new object[] {
                        user,
                        project}, this.onEndAcceptUserOnProjectDelegate, this.onAcceptUserOnProjectCompletedDelegate, userState);
        }
        
        public void RejectUserFromProject(Client.ServiceReference.User user, Client.ServiceReference.Project project) {
            base.Channel.RejectUserFromProject(user, project);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRejectUserFromProject(Client.ServiceReference.User user, Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRejectUserFromProject(user, project, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRejectUserFromProject(System.IAsyncResult result) {
            base.Channel.EndRejectUserFromProject(result);
        }
        
        private System.IAsyncResult OnBeginRejectUserFromProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.User user = ((Client.ServiceReference.User)(inValues[0]));
            Client.ServiceReference.Project project = ((Client.ServiceReference.Project)(inValues[1]));
            return this.BeginRejectUserFromProject(user, project, callback, asyncState);
        }
        
        private object[] OnEndRejectUserFromProject(System.IAsyncResult result) {
            this.EndRejectUserFromProject(result);
            return null;
        }
        
        private void OnRejectUserFromProjectCompleted(object state) {
            if ((this.RejectUserFromProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RejectUserFromProjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RejectUserFromProjectAsync(Client.ServiceReference.User user, Client.ServiceReference.Project project) {
            this.RejectUserFromProjectAsync(user, project, null);
        }
        
        public void RejectUserFromProjectAsync(Client.ServiceReference.User user, Client.ServiceReference.Project project, object userState) {
            if ((this.onBeginRejectUserFromProjectDelegate == null)) {
                this.onBeginRejectUserFromProjectDelegate = new BeginOperationDelegate(this.OnBeginRejectUserFromProject);
            }
            if ((this.onEndRejectUserFromProjectDelegate == null)) {
                this.onEndRejectUserFromProjectDelegate = new EndOperationDelegate(this.OnEndRejectUserFromProject);
            }
            if ((this.onRejectUserFromProjectCompletedDelegate == null)) {
                this.onRejectUserFromProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRejectUserFromProjectCompleted);
            }
            base.InvokeAsync(this.onBeginRejectUserFromProjectDelegate, new object[] {
                        user,
                        project}, this.onEndRejectUserFromProjectDelegate, this.onRejectUserFromProjectCompletedDelegate, userState);
        }
        
        public bool IsValidProjectCode(string code) {
            return base.Channel.IsValidProjectCode(code);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIsValidProjectCode(string code, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsValidProjectCode(code, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndIsValidProjectCode(System.IAsyncResult result) {
            return base.Channel.EndIsValidProjectCode(result);
        }
        
        private System.IAsyncResult OnBeginIsValidProjectCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string code = ((string)(inValues[0]));
            return this.BeginIsValidProjectCode(code, callback, asyncState);
        }
        
        private object[] OnEndIsValidProjectCode(System.IAsyncResult result) {
            bool retVal = this.EndIsValidProjectCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsValidProjectCodeCompleted(object state) {
            if ((this.IsValidProjectCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsValidProjectCodeCompleted(this, new IsValidProjectCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsValidProjectCodeAsync(string code) {
            this.IsValidProjectCodeAsync(code, null);
        }
        
        public void IsValidProjectCodeAsync(string code, object userState) {
            if ((this.onBeginIsValidProjectCodeDelegate == null)) {
                this.onBeginIsValidProjectCodeDelegate = new BeginOperationDelegate(this.OnBeginIsValidProjectCode);
            }
            if ((this.onEndIsValidProjectCodeDelegate == null)) {
                this.onEndIsValidProjectCodeDelegate = new EndOperationDelegate(this.OnEndIsValidProjectCode);
            }
            if ((this.onIsValidProjectCodeCompletedDelegate == null)) {
                this.onIsValidProjectCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsValidProjectCodeCompleted);
            }
            base.InvokeAsync(this.onBeginIsValidProjectCodeDelegate, new object[] {
                        code}, this.onEndIsValidProjectCodeDelegate, this.onIsValidProjectCodeCompletedDelegate, userState);
        }
        
        public int GetNumberOfBugsAssignedToUserInProject(Client.ServiceReference.Project project, Client.ServiceReference.User user) {
            return base.Channel.GetNumberOfBugsAssignedToUserInProject(project, user);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetNumberOfBugsAssignedToUserInProject(Client.ServiceReference.Project project, Client.ServiceReference.User user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNumberOfBugsAssignedToUserInProject(project, user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGetNumberOfBugsAssignedToUserInProject(System.IAsyncResult result) {
            return base.Channel.EndGetNumberOfBugsAssignedToUserInProject(result);
        }
        
        private System.IAsyncResult OnBeginGetNumberOfBugsAssignedToUserInProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.Project project = ((Client.ServiceReference.Project)(inValues[0]));
            Client.ServiceReference.User user = ((Client.ServiceReference.User)(inValues[1]));
            return this.BeginGetNumberOfBugsAssignedToUserInProject(project, user, callback, asyncState);
        }
        
        private object[] OnEndGetNumberOfBugsAssignedToUserInProject(System.IAsyncResult result) {
            int retVal = this.EndGetNumberOfBugsAssignedToUserInProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNumberOfBugsAssignedToUserInProjectCompleted(object state) {
            if ((this.GetNumberOfBugsAssignedToUserInProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNumberOfBugsAssignedToUserInProjectCompleted(this, new GetNumberOfBugsAssignedToUserInProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNumberOfBugsAssignedToUserInProjectAsync(Client.ServiceReference.Project project, Client.ServiceReference.User user) {
            this.GetNumberOfBugsAssignedToUserInProjectAsync(project, user, null);
        }
        
        public void GetNumberOfBugsAssignedToUserInProjectAsync(Client.ServiceReference.Project project, Client.ServiceReference.User user, object userState) {
            if ((this.onBeginGetNumberOfBugsAssignedToUserInProjectDelegate == null)) {
                this.onBeginGetNumberOfBugsAssignedToUserInProjectDelegate = new BeginOperationDelegate(this.OnBeginGetNumberOfBugsAssignedToUserInProject);
            }
            if ((this.onEndGetNumberOfBugsAssignedToUserInProjectDelegate == null)) {
                this.onEndGetNumberOfBugsAssignedToUserInProjectDelegate = new EndOperationDelegate(this.OnEndGetNumberOfBugsAssignedToUserInProject);
            }
            if ((this.onGetNumberOfBugsAssignedToUserInProjectCompletedDelegate == null)) {
                this.onGetNumberOfBugsAssignedToUserInProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNumberOfBugsAssignedToUserInProjectCompleted);
            }
            base.InvokeAsync(this.onBeginGetNumberOfBugsAssignedToUserInProjectDelegate, new object[] {
                        project,
                        user}, this.onEndGetNumberOfBugsAssignedToUserInProjectDelegate, this.onGetNumberOfBugsAssignedToUserInProjectCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.Bug> GetBugsAssignedToProjectAndUser(Client.ServiceReference.Project project, Client.ServiceReference.User user) {
            return base.Channel.GetBugsAssignedToProjectAndUser(project, user);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetBugsAssignedToProjectAndUser(Client.ServiceReference.Project project, Client.ServiceReference.User user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBugsAssignedToProjectAndUser(project, user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Client.ServiceReference.Bug> EndGetBugsAssignedToProjectAndUser(System.IAsyncResult result) {
            return base.Channel.EndGetBugsAssignedToProjectAndUser(result);
        }
        
        private System.IAsyncResult OnBeginGetBugsAssignedToProjectAndUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.Project project = ((Client.ServiceReference.Project)(inValues[0]));
            Client.ServiceReference.User user = ((Client.ServiceReference.User)(inValues[1]));
            return this.BeginGetBugsAssignedToProjectAndUser(project, user, callback, asyncState);
        }
        
        private object[] OnEndGetBugsAssignedToProjectAndUser(System.IAsyncResult result) {
            System.Collections.Generic.List<Client.ServiceReference.Bug> retVal = this.EndGetBugsAssignedToProjectAndUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBugsAssignedToProjectAndUserCompleted(object state) {
            if ((this.GetBugsAssignedToProjectAndUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBugsAssignedToProjectAndUserCompleted(this, new GetBugsAssignedToProjectAndUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBugsAssignedToProjectAndUserAsync(Client.ServiceReference.Project project, Client.ServiceReference.User user) {
            this.GetBugsAssignedToProjectAndUserAsync(project, user, null);
        }
        
        public void GetBugsAssignedToProjectAndUserAsync(Client.ServiceReference.Project project, Client.ServiceReference.User user, object userState) {
            if ((this.onBeginGetBugsAssignedToProjectAndUserDelegate == null)) {
                this.onBeginGetBugsAssignedToProjectAndUserDelegate = new BeginOperationDelegate(this.OnBeginGetBugsAssignedToProjectAndUser);
            }
            if ((this.onEndGetBugsAssignedToProjectAndUserDelegate == null)) {
                this.onEndGetBugsAssignedToProjectAndUserDelegate = new EndOperationDelegate(this.OnEndGetBugsAssignedToProjectAndUser);
            }
            if ((this.onGetBugsAssignedToProjectAndUserCompletedDelegate == null)) {
                this.onGetBugsAssignedToProjectAndUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBugsAssignedToProjectAndUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetBugsAssignedToProjectAndUserDelegate, new object[] {
                        project,
                        user}, this.onEndGetBugsAssignedToProjectAndUserDelegate, this.onGetBugsAssignedToProjectAndUserCompletedDelegate, userState);
        }
        
        public void SaveUserCredentials(Client.ServiceReference.User user) {
            base.Channel.SaveUserCredentials(user);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveUserCredentials(Client.ServiceReference.User user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveUserCredentials(user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveUserCredentials(System.IAsyncResult result) {
            base.Channel.EndSaveUserCredentials(result);
        }
        
        private System.IAsyncResult OnBeginSaveUserCredentials(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.User user = ((Client.ServiceReference.User)(inValues[0]));
            return this.BeginSaveUserCredentials(user, callback, asyncState);
        }
        
        private object[] OnEndSaveUserCredentials(System.IAsyncResult result) {
            this.EndSaveUserCredentials(result);
            return null;
        }
        
        private void OnSaveUserCredentialsCompleted(object state) {
            if ((this.SaveUserCredentialsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveUserCredentialsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveUserCredentialsAsync(Client.ServiceReference.User user) {
            this.SaveUserCredentialsAsync(user, null);
        }
        
        public void SaveUserCredentialsAsync(Client.ServiceReference.User user, object userState) {
            if ((this.onBeginSaveUserCredentialsDelegate == null)) {
                this.onBeginSaveUserCredentialsDelegate = new BeginOperationDelegate(this.OnBeginSaveUserCredentials);
            }
            if ((this.onEndSaveUserCredentialsDelegate == null)) {
                this.onEndSaveUserCredentialsDelegate = new EndOperationDelegate(this.OnEndSaveUserCredentials);
            }
            if ((this.onSaveUserCredentialsCompletedDelegate == null)) {
                this.onSaveUserCredentialsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveUserCredentialsCompleted);
            }
            base.InvokeAsync(this.onBeginSaveUserCredentialsDelegate, new object[] {
                        user}, this.onEndSaveUserCredentialsDelegate, this.onSaveUserCredentialsCompletedDelegate, userState);
        }
        
        public bool UserExists(string username) {
            return base.Channel.UserExists(username);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUserExists(string username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUserExists(username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUserExists(System.IAsyncResult result) {
            return base.Channel.EndUserExists(result);
        }
        
        private System.IAsyncResult OnBeginUserExists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            return this.BeginUserExists(username, callback, asyncState);
        }
        
        private object[] OnEndUserExists(System.IAsyncResult result) {
            bool retVal = this.EndUserExists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUserExistsCompleted(object state) {
            if ((this.UserExistsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UserExistsCompleted(this, new UserExistsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UserExistsAsync(string username) {
            this.UserExistsAsync(username, null);
        }
        
        public void UserExistsAsync(string username, object userState) {
            if ((this.onBeginUserExistsDelegate == null)) {
                this.onBeginUserExistsDelegate = new BeginOperationDelegate(this.OnBeginUserExists);
            }
            if ((this.onEndUserExistsDelegate == null)) {
                this.onEndUserExistsDelegate = new EndOperationDelegate(this.OnEndUserExists);
            }
            if ((this.onUserExistsCompletedDelegate == null)) {
                this.onUserExistsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUserExistsCompleted);
            }
            base.InvokeAsync(this.onBeginUserExistsDelegate, new object[] {
                        username}, this.onEndUserExistsDelegate, this.onUserExistsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.Bug> GetOpenBugsInProject(Client.ServiceReference.Project project) {
            return base.Channel.GetOpenBugsInProject(project);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetOpenBugsInProject(Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOpenBugsInProject(project, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Client.ServiceReference.Bug> EndGetOpenBugsInProject(System.IAsyncResult result) {
            return base.Channel.EndGetOpenBugsInProject(result);
        }
        
        private System.IAsyncResult OnBeginGetOpenBugsInProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.Project project = ((Client.ServiceReference.Project)(inValues[0]));
            return this.BeginGetOpenBugsInProject(project, callback, asyncState);
        }
        
        private object[] OnEndGetOpenBugsInProject(System.IAsyncResult result) {
            System.Collections.Generic.List<Client.ServiceReference.Bug> retVal = this.EndGetOpenBugsInProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOpenBugsInProjectCompleted(object state) {
            if ((this.GetOpenBugsInProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOpenBugsInProjectCompleted(this, new GetOpenBugsInProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOpenBugsInProjectAsync(Client.ServiceReference.Project project) {
            this.GetOpenBugsInProjectAsync(project, null);
        }
        
        public void GetOpenBugsInProjectAsync(Client.ServiceReference.Project project, object userState) {
            if ((this.onBeginGetOpenBugsInProjectDelegate == null)) {
                this.onBeginGetOpenBugsInProjectDelegate = new BeginOperationDelegate(this.OnBeginGetOpenBugsInProject);
            }
            if ((this.onEndGetOpenBugsInProjectDelegate == null)) {
                this.onEndGetOpenBugsInProjectDelegate = new EndOperationDelegate(this.OnEndGetOpenBugsInProject);
            }
            if ((this.onGetOpenBugsInProjectCompletedDelegate == null)) {
                this.onGetOpenBugsInProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOpenBugsInProjectCompleted);
            }
            base.InvokeAsync(this.onBeginGetOpenBugsInProjectDelegate, new object[] {
                        project}, this.onEndGetOpenBugsInProjectDelegate, this.onGetOpenBugsInProjectCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.Bug> GetBugsInProgressFromProject(Client.ServiceReference.Project project) {
            return base.Channel.GetBugsInProgressFromProject(project);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetBugsInProgressFromProject(Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBugsInProgressFromProject(project, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Client.ServiceReference.Bug> EndGetBugsInProgressFromProject(System.IAsyncResult result) {
            return base.Channel.EndGetBugsInProgressFromProject(result);
        }
        
        private System.IAsyncResult OnBeginGetBugsInProgressFromProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.Project project = ((Client.ServiceReference.Project)(inValues[0]));
            return this.BeginGetBugsInProgressFromProject(project, callback, asyncState);
        }
        
        private object[] OnEndGetBugsInProgressFromProject(System.IAsyncResult result) {
            System.Collections.Generic.List<Client.ServiceReference.Bug> retVal = this.EndGetBugsInProgressFromProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBugsInProgressFromProjectCompleted(object state) {
            if ((this.GetBugsInProgressFromProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBugsInProgressFromProjectCompleted(this, new GetBugsInProgressFromProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBugsInProgressFromProjectAsync(Client.ServiceReference.Project project) {
            this.GetBugsInProgressFromProjectAsync(project, null);
        }
        
        public void GetBugsInProgressFromProjectAsync(Client.ServiceReference.Project project, object userState) {
            if ((this.onBeginGetBugsInProgressFromProjectDelegate == null)) {
                this.onBeginGetBugsInProgressFromProjectDelegate = new BeginOperationDelegate(this.OnBeginGetBugsInProgressFromProject);
            }
            if ((this.onEndGetBugsInProgressFromProjectDelegate == null)) {
                this.onEndGetBugsInProgressFromProjectDelegate = new EndOperationDelegate(this.OnEndGetBugsInProgressFromProject);
            }
            if ((this.onGetBugsInProgressFromProjectCompletedDelegate == null)) {
                this.onGetBugsInProgressFromProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBugsInProgressFromProjectCompleted);
            }
            base.InvokeAsync(this.onBeginGetBugsInProgressFromProjectDelegate, new object[] {
                        project}, this.onEndGetBugsInProgressFromProjectDelegate, this.onGetBugsInProgressFromProjectCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.Bug> GetClosedBugsInProject(Client.ServiceReference.Project project) {
            return base.Channel.GetClosedBugsInProject(project);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetClosedBugsInProject(Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetClosedBugsInProject(project, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Client.ServiceReference.Bug> EndGetClosedBugsInProject(System.IAsyncResult result) {
            return base.Channel.EndGetClosedBugsInProject(result);
        }
        
        private System.IAsyncResult OnBeginGetClosedBugsInProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.Project project = ((Client.ServiceReference.Project)(inValues[0]));
            return this.BeginGetClosedBugsInProject(project, callback, asyncState);
        }
        
        private object[] OnEndGetClosedBugsInProject(System.IAsyncResult result) {
            System.Collections.Generic.List<Client.ServiceReference.Bug> retVal = this.EndGetClosedBugsInProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetClosedBugsInProjectCompleted(object state) {
            if ((this.GetClosedBugsInProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetClosedBugsInProjectCompleted(this, new GetClosedBugsInProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetClosedBugsInProjectAsync(Client.ServiceReference.Project project) {
            this.GetClosedBugsInProjectAsync(project, null);
        }
        
        public void GetClosedBugsInProjectAsync(Client.ServiceReference.Project project, object userState) {
            if ((this.onBeginGetClosedBugsInProjectDelegate == null)) {
                this.onBeginGetClosedBugsInProjectDelegate = new BeginOperationDelegate(this.OnBeginGetClosedBugsInProject);
            }
            if ((this.onEndGetClosedBugsInProjectDelegate == null)) {
                this.onEndGetClosedBugsInProjectDelegate = new EndOperationDelegate(this.OnEndGetClosedBugsInProject);
            }
            if ((this.onGetClosedBugsInProjectCompletedDelegate == null)) {
                this.onGetClosedBugsInProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetClosedBugsInProjectCompleted);
            }
            base.InvokeAsync(this.onBeginGetClosedBugsInProjectDelegate, new object[] {
                        project}, this.onEndGetClosedBugsInProjectDelegate, this.onGetClosedBugsInProjectCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Client.ServiceReference.BugActionLog> GetAllBugActionLogsInProject(Client.ServiceReference.Project project) {
            return base.Channel.GetAllBugActionLogsInProject(project);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllBugActionLogsInProject(Client.ServiceReference.Project project, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllBugActionLogsInProject(project, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Client.ServiceReference.BugActionLog> EndGetAllBugActionLogsInProject(System.IAsyncResult result) {
            return base.Channel.EndGetAllBugActionLogsInProject(result);
        }
        
        private System.IAsyncResult OnBeginGetAllBugActionLogsInProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Client.ServiceReference.Project project = ((Client.ServiceReference.Project)(inValues[0]));
            return this.BeginGetAllBugActionLogsInProject(project, callback, asyncState);
        }
        
        private object[] OnEndGetAllBugActionLogsInProject(System.IAsyncResult result) {
            System.Collections.Generic.List<Client.ServiceReference.BugActionLog> retVal = this.EndGetAllBugActionLogsInProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllBugActionLogsInProjectCompleted(object state) {
            if ((this.GetAllBugActionLogsInProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllBugActionLogsInProjectCompleted(this, new GetAllBugActionLogsInProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllBugActionLogsInProjectAsync(Client.ServiceReference.Project project) {
            this.GetAllBugActionLogsInProjectAsync(project, null);
        }
        
        public void GetAllBugActionLogsInProjectAsync(Client.ServiceReference.Project project, object userState) {
            if ((this.onBeginGetAllBugActionLogsInProjectDelegate == null)) {
                this.onBeginGetAllBugActionLogsInProjectDelegate = new BeginOperationDelegate(this.OnBeginGetAllBugActionLogsInProject);
            }
            if ((this.onEndGetAllBugActionLogsInProjectDelegate == null)) {
                this.onEndGetAllBugActionLogsInProjectDelegate = new EndOperationDelegate(this.OnEndGetAllBugActionLogsInProject);
            }
            if ((this.onGetAllBugActionLogsInProjectCompletedDelegate == null)) {
                this.onGetAllBugActionLogsInProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllBugActionLogsInProjectCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllBugActionLogsInProjectDelegate, new object[] {
                        project}, this.onEndGetAllBugActionLogsInProjectDelegate, this.onGetAllBugActionLogsInProjectCompletedDelegate, userState);
        }
    }
}
